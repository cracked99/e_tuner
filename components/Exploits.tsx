"use client"

import { useState } from 'react';
import { Button } from "@/components/ui/button"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { runExploit } from '@/lib/ble';

const exploits = [
  { id: 'unlock_without_auth', name: 'Unlock without authentication' },
  { id: 'speed_limit_bypass', name: 'Speed limit bypass' },
  { id: 'firmware_downgrade', name: 'Firmware downgrade' },
];

export function Exploits() {
  const [selectedExploit, setSelectedExploit] = useState('');
  const [deviceAddress, setDeviceAddress] = useState('');
  const [running, setRunning] = useState(false);
  const [result, setResult] = useState(null);
  const [error, setError] = useState(null);

  const executeExploit = async () => {
    if (!selectedExploit || !deviceAddress) {
      setError('Please select an exploit and enter a device address');
      return;
    }

    setRunning(true);
    setResult(null);
    setError(null);
    try {
      const exploitResult = await runExploit(selectedExploit, deviceAddress);
      setResult(exploitResult);
    } catch (error) {
      console.error('Exploit execution failed:', error);
      setError('Exploit execution failed. Please check the device address and try again.');
    } finally {
      setRunning(false);
    }
  };

  return (
    <div className="space-y-4">
      <Select onValueChange={setSelectedExploit}>
        <SelectTrigger className="w-[280px]">
          <SelectValue placeholder="Select an exploit" />
        </SelectTrigger>
        <SelectContent>
          {exploits.map((exploit) => (
            <SelectItem key={exploit.id} value={exploit.id}>
              {exploit.name}
            </SelectItem>
          ))}
        </SelectContent>
      </Select>
      <div className="grid w-full max-w-sm items-center gap-1.5">
        <Label htmlFor="deviceAddress">Device Address</Label>
        <Input
          type="text"
          id="deviceAddress"
          value={deviceAddress}
          onChange={(e) => setDeviceAddress(e.target.value)}
          placeholder="00:11:22:33:44:55"
        />
      </div>
      <Button onClick={executeExploit} disabled={running || !selectedExploit || !deviceAddress}>
        {running ? 'Running...' : 'Run Exploit'}
      </Button>
      {error && (
        <Alert variant="destructive">
          <AlertTitle>Error</AlertTitle>
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}
      {result && (
        <Alert variant={result.success ? "default" : "destructive"}>
          <AlertTitle>{result.success ? 'Success' : 'Failed'}</AlertTitle>
          <AlertDescription>{result.message}</AlertDescription>
        </Alert>
      )}
    </div>
  );
}